generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(dbgenerated("generate_alphanumeric_id()")) @db.VarChar(5)
  nickname    String           @db.VarChar(200)
  name        String           @db.VarChar(200)
  email       String           @unique @db.VarChar(200)
  bio         String?
  isPrivate   Boolean          @default(false) @map("is_private")
  avatarUrl   String?          @map("avatar_url")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @map("updated_at")
  deletedAt   DateTime?        @map("deleted_at")
  following   Follow[]         @relation("followee")
  followers   Follow[]         @relation("follower")
  lists       List[]
  reviews     Review[]
  followStats UserFollowStats?

  @@index([nickname, id])
  @@map("users")
}

model Review {
  id        String    @id @default(uuid())
  userId    String    @map("user_id") @db.VarChar(50)
  trackId   String    @map("track_id") @db.VarChar(50)
  rate      Int
  comment   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
  @@map("reviews")
}

model List {
  id        String      @id @default(uuid())
  name      String      @db.VarChar(200)
  type      ListType
  userId    String      @map("user_id") @db.VarChar(50)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
  items     ListItem[]
  likes     ListLikes[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("lists")
}

model ListItem {
  id        String    @id @default(uuid())
  listId    String    @map("list_id") @db.VarChar(50)
  itemId    String    @map("item_id") @db.VarChar(50)
  position  Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  list      List      @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([listId, position])
  @@unique([listId, itemId])
  @@unique([listId, itemId], map: "list_items_unique_item")
  @@unique([listId, position], map: "list_items_unique_position")
  @@map("list_items")
}

model ListLikes {
  id        String   @id @default(uuid())
  listId    String   @map("list_id") @db.VarChar(50)
  userId    String   @map("user_id") @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([listId, userId])
  @@map("list_likes")
}

model Follow {
  followerId String   @map("follower_id")
  followeeId String   @map("followee_id")
  followedAt DateTime @default(now()) @map("followed_at")
  followee   User     @relation("followee", fields: [followeeId], references: [id], onDelete: Cascade, map: "fk_follows_followee")
  follower   User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade, map: "fk_follows_follower")

  @@id([followerId, followeeId], name: "follows_pkey")
  @@index([followerId], map: "idx_follows_follower")
  @@index([followeeId], map: "idx_follows_followee")
  @@map("follows")
}

model UserFollowStats {
  userId         String @id @map("user_id")
  followersCount Int    @default(0) @map("followers_count")
  followeesCount Int    @default(0) @map("followees_count")
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_follow_stats")
}

view BestTracks {
  track_id       String  @id @db.VarChar(50)
  average_rating Decimal @db.Decimal
  review_count   BigInt

  @@map("vw_best_tracks")
}

enum ListType {
  album
  artist
  track

  @@map("list_type")
}
