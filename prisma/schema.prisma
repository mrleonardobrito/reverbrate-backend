// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @db.VarChar(5) @default(dbgenerated("generate_alphanumeric_id()"))
  nickname  String    @unique @db.VarChar(200)
  name      String    @db.VarChar(200)
  email     String    @unique @db.VarChar(200)
  bio       String?   @db.Text
  isPrivate Boolean   @default(false) @map("is_private")
  avatarUrl String?   @map("avatar_url") @db.Text
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  reviews   Review[]
  lists     List[] 

  @@map("users")
}

model Review {
  id        String    @id @default(uuid())
  userId    String    @map("user_id") @db.VarChar(50)
  trackId   String    @map("track_id") @db.VarChar(50)
  rate      Int       @db.Integer
  comment   String?   @db.Text
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
  @@map("reviews")
}

enum ListType {
  album
  artist
  track

  @@map("list_type")
}

model List {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(200)
  type      ListType
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  items     ListItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @map("user_id") @db.VarChar(50)

  @@map("lists")
}

model ListItem {
  id        String    @id @default(uuid())
  listId    String    @map("list_id") @db.VarChar(50)
  itemId    String    @map("item_id") @db.VarChar(50)
  position  Int       @db.Integer
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  list      List      @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([listId, position])
  @@unique([listId, itemId])
  @@map("list_items")
}